name: Multi Kernel Testing
on: [ pull_request ]

jobs:
  multikernel_tester:
    strategy:
      matrix:
        kernel_flavor: [ amazonlinux2, debian, fedora, kali1, kali3, kali4, kali5-7, kali8-9 ]
    runs-on: ubuntu-latest
    steps:
    - name: Running on Kernel Flavor ${{ matrix.kernel_flavor }}
      run: echo "Running on Kernel Flavor ${{ matrix.kernel_flavor }}"
    - name: Preset directories
      run: sudo mkdir -p /kernel-images/${{ matrix.kernel_flavor }} && sudo chown -fR $USER:$USER /kernel-images
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Docker Cache Hash
      run: echo "GITHUB_CACHE_HASH=$(md5sum Makefile docker/Dockerfile.builder | md5sum | awk '{print $1}')" >> $GITHUB_ENV
    - name: Setup docker cache
      uses: actions/cache@v3
      with:
        path: ~/.dockercache
        key: ${{ env.GITHUB_CACHE_HASH }}-v0
        restore-keys: |
          ${{ env.GITHUB_CACHE_HASH }}-v0
    - name: Configure Docker
      run: sudo systemctl stop docker && sudo rm -rf /var/lib/docker && sudo mkdir -p /var/lib/docker && sudo mkdir -p ~/.dockercache && sudo chown -fR root:root ~/.dockercache && sudo mount --rbind ~/.dockercache /var/lib/docker && sudo systemctl start docker
    - name: Build eBPF
      run: make build && make fix-permissions
    - name: Setup Kernel Image cache
      uses: actions/cache@v3
      with:
        path: /kernel-images
        key: ${{ matrix.kernel_flavor }}-kernel-images-v2
        restore-keys: ${{ matrix.kernel_flavor }}-kernel-images-v2
    - id: 'auth'
      uses: 'google-github-actions/auth@v0'
      with:
        credentials_json: '${{ secrets.ACTIONS_GCP_JSON_CREDENTIALS }}'
    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v0'
    - name: Sync Kernel Images from GS
      run: gsutil -m rsync -r gs://ebpf-ci-kernel-images/${{ matrix.kernel_flavor}} /kernel-images/${{ matrix.kernel_flavor }}
    - name: Install packages
      run: |
           sudo DEBIAN_FRONTEND=noninteractive apt-get update && \
           sudo DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
           parallel \
           golang-go \
           libz-dev \
           qemu-system
    - name: Run Tests
      run: cd testing && ./run_tests.sh -c /kernel-images
